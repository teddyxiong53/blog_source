# 结构体

GstElement
	它的属性大多通过GObject对象实现。
	使用GObject的方法可以对GstElement进行get、set。
	GParamSpecs也被支持。
	每个GstElement至少从基类GstObject继承了一个name属性。
	这个name属性在gst_element_factory_make的时候有用。
	你可以用gst_object_get_name来获取名字。用gst_object_set_name来设置名字。
	gchar *name;
    element = gst_element_factory_make("fakesrc", "source");
    g_object_get(G_OBJECT(element), "name", &name, NULL);
    g_print("the name of element is:%s\n", name);
    g_free(name);
    g_object_unref(GST_OBJECT(element));
GstBus

GSTMessage

# 接口
void gst_init(argc, argv);
	这里面做了这些事情：
	1、初始化内部结构。
	2、检查plugin。
	3、执行命令行选项。（如果有的话）
	
gst_element_set_state

gst_element_get_bus

gst_bus_timed_pop_filtered

gst_message_unref

gst_object_unref
	释放一个对象。例如释放一个element对象。
	是这样做：
	gst_object_unref(GST_OBJECT(element));
gst_element_factory_make ("videotestsrc", "source");
	创建一个元件。
	参数1：类型。这个都是固定的一些字符串，不能随便写。
		常见的类型有：
		fakesrc
		videotestsrc
		
	参数2：名字。可以没有。这个只是为了好理解使用。
	实际上是gst_element_factory_find和gst_element_factory_create 这2个函数的组合。
	GstFactory *fa
gst_pipeline_new 
	新建一个pipeline。参数是pipeline的名字。
	这个创建一个pipeline和用gst_element_factory_make的方式创建。区别是什么？
	参数少了一个。
	返回值是一样的，都是GstElement的。
	
gst_bin_add_many (GST_BIN (pipeline), source, sink, NULL);
	把所有的元件添加到pipeline里面。
	
gst_bin_add
	这个一次添加一个。
	
	
gst_element_link (source, sink) 
	把source和sink连接起来。这样才能通。
	
	
bus = gst_element_get_bus (pipeline);
msg = gst_bus_timed_pop_filtered (bus, GST_CLOCK_TIME_NONE, GST_MESSAGE_ERROR | GST_MESSAGE_EOS);
	从pipeline拿到总线，因为总线是由pipeline统一管理的。
	从总线上拿到消息。
	这里会阻塞，直到产生了ERROR或者EOS消息。
	
## 消息处理
GST_MESSAGE_TYPE(message)
	取出消息类型。
	
	
	


api分类
core
	
libraries
plugins
