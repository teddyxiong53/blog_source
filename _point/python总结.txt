我还是把python2.7的看明白先。


_是上一次的结果，类似与bash的$? 
在作为计算器使用的时候，比较方便。

3*"abc"
多行会被自动连接起来。
a = ('aaa'
	'bbb')
	这个比较实用。
	
为什么索引倒着来的时候，是从-1开始呢？
因为-0就是0啊。

python里字符串是常量，不能修改。
例如s = "aaa"
s[0] = 'b'
这种操作就是不允许的。

unicode
从python2.0开始，引入了Unicode这种object类型。
跟已有的string类型可以很好配合，会在需要的时候自动进行转换。
str也是对象类型的。str->basestring->object
In [6]: s = u'aaa'

In [7]: type(s)
Out[7]: unicode

In [8]: s1 = 'bbb'

In [10]: type(s1)
Out[10]: str


In [12]: u1 = unicode("aa")

In [13]: u1
Out[13]: u'aa'


把list当stack用。
append和pop
把list当queue用。
append和popleft


os.open和open的区别。
open返回的是一个file对象。这个更加方便。
	f.fileno()得到的就是fd。
os.open返回的是一个fd。

Python自悟：Python中的Dict and Set
https://www.jianshu.com/p/6439954d2417

class Collection(Sized, Iterable, Container):
	这个继承了3个父类。其实就是3个接口。
	Sized，必须实现抽象方法__len__
	Iterable，必须实现__iter__
	Container，必须实现__contains__
	
	
defaultdict
	需要传递一个类型作为参数，用来构造一个默认值。
	可以这样：
	defaultdict(lambda: 1)
	defaultdict(list)
	
	
import string
这个string模块比较老了。建议不要再用。

maketrans(...)
        maketrans(frm, to) -> string
        
        Return a translation table (a string of 256 bytes long)
        suitable for use in string.translate.  The strings frm and to
        must be of the same length.
table = maketrans(b'', b'')
	这样得到的table的内容是整个ASCII码表的内容。
	
	
functools模块的作用是什么？
应用于高阶函数，就是函数的函数。
参数和返回值是函数。

list.sort函数是直接修改原始列表。
sorted这个内置函数，是返回一个新的列表，原始列表不变。
所以一般使用sorted这个内置函数，更好些。
如下：

In [78]: a = [1,3,2]

In [79]: sorted(a)
Out[79]: [1, 2, 3]

In [80]: a
Out[80]: [1, 3, 2]
In [82]: a.sort()

In [83]: a
Out[83]: [1, 2, 3]

比较和排序函数，一般有一个key函数。key函数的作用是在比较之前，先对每个元素执行的一个函数。
例如先把所有元素转成小写的。

In [85]: sorted("I am very GOOD".split(), key=str.lower)
Out[85]: ['am', 'GOOD', 'I', 'very']

不过key函数更加主要的用途是，从对象里选取索引来做排序。
student_tuples = [
    ('allen', 'a', 10),
    ('bob', 'b', 9),
    ('carol', 'c', 11)
]
print sorted(student_tuples, key=lambda student:student[2])

对于key函数的功能，python还提供了operator模块。来让我们使用更加方便。
常用的有3个函数itemgetter, attrgetter，methodcaller。
print sorted(student_tuples, key=operator.itemgetter(2))
还可以按多个属性依次排序。
print sorted(student_tuples, key=operator.itemgetter(1,2))

升序和降序
sorted和list.sort函数默认是升序的，如果要降序，
把reverse参数赋值为True就好了。

排序的稳定性
稳定性的一个很有用的特性。它可以保持当前的顺序。
在多次排序的时候，很有用。
多个记录有相同的键值的时候，保留当前的原始顺序。

python里使用的排序算法是timsort算法。

__slot__的用法。

jinja2的主要对外内容是：
Environment和FileSystemLoader这2个类。

在python3里，True和False的大小不一样。
In [6]: True.__sizeof__() 
Out[6]: 28

In [7]: False.__sizeof__()
Out[7]: 24
在python2里，是一样的。
In [120]: True.__sizeof__()
Out[120]: 24

In [121]: False.__sizeof__()
Out[121]: 24
bool类型是int的子类。
可以help(bool)看出来。
也可以issubclass(bool, int)

>>> import sys
>>> sys.getsizeof(1L)
28
>>> sys.getsizeof(0L)
24

class A(object) 和class A()
这2个的表现不一样。
前者不会调用到__init__，后面不会调用到__new__。
但是在python3里，这2个没有区别，会默认强制继承object。

Python的三大器：迭代器、生成器、装饰器

subprocess.call(["ls", "-l"], stdout=f, stderr=f)
应该是起到一个类似C语言的system函数的作用。
output = subprocess.check_output(['git', 'rev-parse', 'HEAD'])
这个可以取得命令的输出。

调试时的日志配置。
logging.basicConfig(format='%(asctime)s %(filename)s[line:%(lineno)d] %(levelname)s %(message)s', level=logging.DEBUG)

正式的日志配置：
logging.basicConfig(filename="./1.log", filemode='w', format="%(asctime)s %(filename)s [line:%(lineno)d] %(levelname)s %(message)s", level=logging.DEBUG)


super的用途
super让你可以避免直接使用基类。这个特性比较有用。
主要优势是在多继承的时候。
super这个内置函数是在python2.2的时候引入的。
之前的super文档描述也是有问题的。
super函数返回的不是superclass，而是一个proxy对象。

在python2.2里了，Guido引入了descriptor的概念。
super主要是方便访问被子类override的父类方法。

在python2.1里，class跟type的概念完全没有关联。
经典类的Instance，跟class没有关系。因为type得到的都是instance类型。
这个在进行类型比较的时候，就毫无作用了。
在python2.2引入新式类，就是为了关联class和type。

python的数据模型
object是python的数据抽象。
每个object，有一个id，一个type，一个value。
id是唯一的，在创建时就有的，可以理解为object在内存的地址。
is()函数，就是比较id是否相同的。
id()函数，用来查看id。

python里method和function区别？
method是function的一种特例。

python不会自动调用父类的构造方法。
需要你自己手动调用。
调用的方法有2种：
1、
Parent.__init__(self, args)
2、
super(Child, self).__init__(args)
第一种方法简单，容易理解。

如果父类的构造函数里有添加成员变量，那么就必须在子类里手动调用父类的构造函数，
不然你没法在子类的构造函数里使用这些成员变量。


python为什么不自动调用父类的构造方法呢？
对于python来说，构造函数，跟其他函数没有区别。

lambda在threading创建时的一个用法。
一般我们是这么用的。
t = threading.Thread(target=xx_func, (arg1, arg2))
但是可以这么写：
t = threading.Thread(target=lambda: xx_func(arg1, arg2))


用requests来下载文件。

Requests 的哲学是以 PEP 20 的习语为中心开发的，所以它比 urllib 更加 Pythoner
当把get函数的stream参数设置成False时，它会立即开始下载文件并放到内存中，如果文件过大，有可能导致内存不足。
r = requests.get(url_file, stream=True)
f = open("file_path", "wb")
for chunk in r.iter_content(chunk_size=512):
    if chunk:
        f.write(chunk)

format补零。
>>> "{0:03d}".format(1)
'001'

判断文件夹是否存在
import os
os.path.exists(test_dir)

线程使用成员函数作为主体，应该怎么做？
很简单，直接Test.func作为target就可以了。args传递(args,)

csv文件读写。
去除csv里的重复行。
用最简单的set的方式来做。
lines_seen = set()
in_file = open('./info.csv', 'r')
out_file = open('./info_out.csv', 'w+')
lines = in_file.readlines()
for line in lines:
    if line not in lines_seen:
        out_file.write(line)
        lines_seen.add(line)

in_file.close()
out_file.close()

什么是迭代？
迭代是重复反馈过程的活动。
上一次的输出作为下一次的输入。
迭代可以简单理解为普通的循环。
递归是一种特殊的循环。

迭代协议。
从左到右扫描一个对象的行为准则，就是迭代协议。


m = map(int, "1.2.3".split(".")) 
In [23]: list(m)   
Out[23]: [1, 2, 3]

In [24]: "1.2.3".split(".")
Out[24]: ['1', '2', '3']

list的成员都是一致的，则可以直接进行比较。
In [25]: [1,2,3] < [2,3,4]    
Out[25]: True

python里函数和方法的区别。


