看看有哪些第三方库常用。
我根据自己在不同的项目里看到的，记录下来。

我对各个模块的简单测试代码放在：
https://github.com/teddyxiong53/nodejs_code/tree/master/module_study

没事的时候，可以看到这里的模块。
https://github.com/sindresorhus/awesome-nodejs

nodejs模块划分有的真的太细了。
例如bytes这个模块，唯一的功能就是把一个数字（表示容量）转成字符串（多少kb、mb之类）。
或者反过来转化。把一个表示容量的字符串，转成一个数字。


mocha
	测试框架。
	同时支持异步和同步的测试。
	
bluebird
	一个第三方的Promise库。
	网上说效率比原生的要高。
	知道即可。
	里面有个很好的功能，就是把非Promise转成Promise。
	const Promise = require('bluebird')
	var readFile = require("fs").readFile
	var myAsyncReadFile = Promise.promisify(readFile)
	
body-parser
	
querystring
	做url查询参数的解析。
	
iconv-lite
	nodejs默认不支持gbk编码。
	这个可以帮我们支持。
	iconv.decode(data, 'gbk')
	
	
finalhandler
	作为最后一步，来应答http请求。
	finalhandler(req, res[,options])
	
safe-buffer
	比默认的Buffer安全。
	目标是替代这个Buffer。
	
content-disposition
	这个是跟http header里的content-disposition有关的。
	
	
morgan
	express的日志模块。
	可以独立工作。
	
debug
	打印调试信息的模块。
	基本用法：
	var debug = require("debug")("express:server")
	debug("xxx")
	debug("xx" + " " + "yy")
	在运行时，设置环境变量：
	DEBUG=express:* node index.js
	
meow
	写命令行工具需要的模块。
	logo是一只猫。
	挺好用的。
	
util
	
sleep
	这个可以很方便地实现sleep功能。
	var sleep = require("sleep")
	sleep.sleep(1)
	sleep.msleep(1)
	sleep.usleep(1)
	这个是靠c++实现的。
	代码在这里：
	https://github.com/erikdubbelboer/node-sleep/blob/master/index.js
	
ms
	这个是把任意时间转成毫秒数的。
	debug这个模块只依赖了这个。
	基本用法：
	ms("2 days")
	ms("2d") //这个也是表示2天
	ms("2h")
	ms("1m")
	ms("1y")
	ms("-1h") //还可以表示负数时间。
	实现功能很简单，但是很实用。
	
colors
	这个是设置颜色。
	var colors = require("colors")
	console.log("set green".green)
	console.log("set underline and red".underline.red)
	console.log("inverse color".inverse)//就是选中的那种效果
	console.log("rainbow color".rainbow)
	console.log("trap".trap)//感觉是手写效果。
	
	
moment
	把days、数字这种符合人的习惯的说法，转成时间字符串。
	
bcrypt
	加密。
	
log4js
	日志模块。
	var log4js = require("log4js")
	var logger = log4js.getLogger()
	logger.setLevel('debug')
	logger.debug("xx")
	完整一点：
	var log4js = require("log4js")
	log4js.configure({
		appenders: [
		  { type: 'console' },
		  { type: 'file', filename: "./xhl.log", category: 'xhl' }
		]
	  });
	const logger = log4js.getLogger('xhl')
	logger.trace('trace')
	logger.debug('debug')
	logger.info('info')
	logger.warn('warn')
	logger.error("error")
	logger.fatal('fatal')
	
request
	很方便的http请求工具。
	var request = require("request")
	request.get({
		url: "http://www.baidu.com"
	})
    .on('response', function(response) {
        console.log('get response')
    })
    .on('error', function(error) {
        console.log(error)
    })
	
eventproxy
	应该是跟promise是一类东西。可以学习一下。
	解决callback嵌套的问题。
	把串行等待变成并行等待。
	
helmet
	字面含义是头盔，作用是包含你的网站，通过设置一下http header信息。
	代码就一个index.js文件。不过集成了一些其他的功能。
	
	frameguard
		这个是起什么作用？
		防止点击劫持。所谓点击劫持，是指网站或者邮件里的按钮，实际上指向了其他网站的行为。
		
loader
	这个是在html里导入css和js文件的。
	跟直接引用，有什么特别的好处？
		对于dev和prod环境，可以生成不同的路径，例如prod的，可以生成cdn路径。
		主要就是这个用途的。
	用法：
		需要在express的应用代码里，把Loader放进到app.locals里。
		html里，直接使用传递过来的Loader。
busboy
	这个是解析form数据的。
	
validator
	字符串的校验处理相关。
	
	
url
	var url = require("url")
	var result = url.parse("http://user:password@host.com:8080/p/a/t/h/?query=string#hash")
	console.log(result)
	console.log(url.format(result)) //这个是把一个Url对象转成一个字符串。
	输出：
	Url {
  protocol: 'http:',
  slashes: true,
  auth: 'user:password',
  host: 'host.com:8080',
  port: '8080',
  hostname: 'host.com',
  hash: '#hash',
  search: '?query=string',
  query: 'query=string',
  pathname: '/p/a/t/h/',
  path: '/p/a/t/h/?query=string',
  href: //href是全部转成小写。
   'http://user:password@host.com:8080/p/a/t/h/?query=string#hash' }
   
   
should
	这个是测试库。让你的代码显得更加易读。
	这样用法，真的挺神奇的。
	(0).should.be.a.Number()