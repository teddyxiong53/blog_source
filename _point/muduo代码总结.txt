从echo.h开始看。
EchoServer类
	成员变量
		就一个TCPServer类型。
	对外接口：
		就一个，start
	构造函数：
		就一个。
			2个参数
				loop，
				地址。
	内部需要实现接口：
		连接回调。
		消息回调。
		
InetAddress类
	成员变量：
		就一个。sockaddr_in类型。
	构造函数：
		4个。
		1、3个参数。都是可选的。
			port。可选。
			loopbackOnly。可选。
			ipv6。bool类型，可选。
		2、2个参数呢。
			ip。string类型。
			port。
		3、一个参数。
			sockaddr_in类型。
	对外接口：
		toIpPort 转成ip和port的字符串。
EventLoop类
	不可拷贝。
	构造函数：
		只有一个。不带参数。
	对外接口：
		
TcpServer
	构造函数：
		一个。
		参数4个。
			1、loop。
			2、地址。
			3、名字。EchoServer这样。
			4、是否复用端口。可选。默认false。
	
Timestamp
	是可拷贝的。
	实现了boost的等于比较和小于比较。
	构造函数2个：
		一个没有参数。
		一个有一个参数。
	成员变量
		只有一个。就是从1970年以来的毫秒数。
	对外接口：
		swap
		toString
		now
		invalid
		fromUnixTime

muduo里，只有极少数几个类是可以拷贝的。
Buffer
Date
HttpContext
HttpRequest
HttpResponse
InetAddress
TimerId
Timestamp
TimeZone
总共9个。时间相关的4个。
Http相关的3个。另外2个其他。


http相关的类：
HttpServer
	可以设置线程数。
	成员变量：
		就一个TCPServer。
	构造函数：
		4个参数：
			1、loop。
			2、监听地址。
			3、name。
			4、选项。就是是否重用端口，默认是不重用。
	回调：
		总共3个。
		onConnection：
			这个里面就是把HttpContext设置给conn。
		onMessage
			调用HttpContext的parseRequest函数解析请求。
			如果解析内容失败，关闭连接。
			如果数据收完整了，调用自己的onRequest函数。
		onRequest
			调用httpCallback_这个成员变量回调。
			这个需要需要用户去实现。
			然后发送回复。关闭连接。
			
			
HttpContext
	成员变量：
		解析状态。
			枚举类型。
			4种状态：
			1、期待请求行。
			2、期待header。
			3、期待body。
			4、拿到所有了。
			
		HttpRequest。
		
	对外接口：
		主要就一个：
		parseRequest
HttpRequest
	成员变量：
		1、方法。枚举类型。get/post/put等。
		2、版本。unknown、1.0、1.1
		3、path。
		4、query。
		5、收到的时间戳。
		6、headers。是一个map。
	简单，只有头文件，没有cpp文件。
	
HttpResponse
	成员变量：
		1、headers。
		2、状态码。
		3、状态信息。
		4、是否关闭连接。
		5、body。
	对外接口：
		appendToBuffer
		主要就这一个。
		
想一下怎么用muduo来写dossos。

现在碰到一个问题，就是指针放在智能指针里，传递后再拿出来，变了。
是需要用boost的any_cast，因为context是boost::any类型。

EventLoopThreadPool分析
	成员变量：
		1、loop指针。
			靠线程函数里的栈上loop对象返回。
		2、thread对象。
		3、mutex。
		4、cond。在loop对象准备好的时候，通知一下。
		5、callback。线程初始化回调。
		