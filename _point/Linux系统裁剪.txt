Linux裁剪的手段
减小内核尺寸
	包括3个方面：
		1、镜像尺寸。
		2、load到内存后占用尺寸。
		3、动态内存。
printk优化
内核栈大小调整
使用压缩文件系统
	ubifs
	squashfs
	
应用裁剪
	strip
	库裁剪
		使用更加小的库。
			musl。
XIP


Linux系统开机加速

测量启动时间
	printk times
		显示每个printk的执行时间。
	ftrace
		报告内核里每个函数的执行时间。
	Linux跟踪工具箱LTT
		用于报告确切的内核和进程事件的时间数据。
	
减少启动时间的技术和技巧
1、bootloader加速。
	xip执行内核，减少读取时间。
	dma拷贝镜像。
	硬件解压。
2、内核加速
	关闭console。
	关闭printk。
	预设lpj。
	延迟initcall
	切换slab为slob或者slub。
	去掉sysfs或者procfs。
	仔细研究所有的配置项。去掉试一试。
	文件系统相关
		利用休眠机制
3、应用加速
	优化rc脚本。
	并行执行rc脚本。
		这个并没有好的方案。
	xip执行应用。
		cramfs可以。但是一般没有用这种文件系统。
	静态编译app。
		可以减小镜像的大小。
	应用程序初始化优化
	把模块编译到内核镜像。
	避免使用udev。
		手动创建mknod。
	设置静态ip。
		dhcp会耗时。
	使用uclibc。
	库优化工具。
		去掉库里面没有用到的工具。
	函数重排。
		按照顺序排放。
		
busybox的命令分为两种：
1、内置的。
	就是函数，很快。
2、applet。
	通过fork/exec来执行。
	
busybox重点是优化了程序的尺寸。
对于时间，有这些：
1、大部分命令，以及built-in命令在pipe里，都是fork的。
2、反向引用的命令也是fork的。
3、echo、test、[ 这种最常用的命令，都是applet的方式来实现的。

优化的方向：
1、把常见的命令，实现为built-in命令。
	不过，现在默认已经有更多的常用命令被修改为built-in方式了。
优化初始化脚本：
1、脚本里不要有无用的代码。
2、尽量使用busybox内置的命令。
3、尽量不要用管道。
4、减少管道里的命令的个数。
5、尽量不要向后引用命令。

上面的这些操作都是为了减少fork。

去掉busybox的命令的帮助信息。

